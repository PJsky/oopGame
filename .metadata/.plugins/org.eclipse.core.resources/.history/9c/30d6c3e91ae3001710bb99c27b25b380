package Projekt;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;

public class SmartEnemyV2 extends GameObject{

	private handler handle;
	private GameObject player,player2;
	
	public SmartEnemyV2(float x, float y, ID id, handler handle,float health) {
		super(x, y, id);
		// TODO Auto-generated constructor stub
		this.handle = handle;
		this.health = health;
		
		for(int i= 0; i<handle.object.size();i++) {
			if(handle.object.get(i).getID() == ID.Player) player = handle.object.get(i);
			//if(handle.object.get(i).getID() == ID.Player2) player2 = handle.object.get(i); // tu jest blad
			else player2 = handle.object.get(i);
		}
		for(int i= 0; i<handle.object.size();i++) {if(handle.object.get(i).getID() == ID.Player2)
			player2 = handle.object.get(i);}
		/*for(int i= 0; i<handle.object.size();i++) {
			if(handle.object.get(i).getID() == ID.Player) player = handle.object.get(i);
			if(handle.object.get(i).getID() == ID.Player2) player2 = handle.object.get(i);
			//else player2 = handle.object.get(i);
		}*/

		
		/*for(int i= 0; i<handle.object.size();i++) {
			if(handle.object.get(i).getID() == ID.Player) player = handle.object.get(i);
		}
		
		for(int i= 0; i<handle.object.size();i++) {
			if(handle.object.get(i).getID() == ID.Player2) player2 = handle.object.get(i);
			else {
				for(int j= 0; j<handle.object.size();j++) {
					if(handle.object.get(j).getID() == ID.Player) player2 = handle.object.get(j);
				}
			}
		}*/ //dziala dla 1 gracza
		
		
		
		
	}
	
	@Override
	public Rectangle getBounds() {
		// TODO Auto-generated method stub
		return new Rectangle((int)x,(int)y,32,48); // returning the current hitbox
	}
	
	

	@Override
	public void tick() {
		// TODO Auto-generated method stub
		x +=velX*4;
		y +=velY*4;
		
		float diffX = x - player.getX() - 16;
		float diffY = y - player.getY() - 16;
		float distance = (float) Math.sqrt((x-player.getX())*(x-player.getX()) + (y-player.getY())*(y-player.getY()));
		float diffX2 = x - player2.getX() - 16;
		float diffY2 = y - player2.getY() - 16;
		float distance2 = (float) Math.sqrt((x-player2.getX())*(x-player2.getX()) + (y-player2.getY())*(y-player2.getY()));

		if(player.health == 0) {
			distance = 10000;
		}
		if(player2.health == 0 ) {
			distance2 = 10000;
		}
		
		if (distance* distance > distance2 * distance2) {
			diffX = diffX2;
			diffY = diffY2;
			distance = distance2;

		}
		
		velX = (float) ((-1.0/distance) * diffX ); // vel = 4 to where u are
		velY = (float) ((-1.0/distance) * diffY );
		
		/*if(distance * distance < distance2 * distance2) {
			velX = (float) ((-1.0/distance) * diffX ); // vel = 4 to where u are
			velY = (float) ((-1.0/distance) * diffY );
		}else if(distance * distance > distance2 * distance2) {
			velX = (float) ((-1.0/distance2) * diffX2 ); // vel = 4 to where u are
			velY = (float) ((-1.0/distance2) * diffY2 );
		}
		
		if(x <= 0 || x>= Game.WIDTH - 32) velX *= -1;
		if(y <= 0 || y>= Game.HEIGHT - 48) velY *= -1;*/
		
		if(health == 0) {
			handle.removeObject(this);
		}
	}

	@Override
	public void render(Graphics g) {
		// TODO Auto-generated method stub
		g.setColor(Color.pink);
		g.fillRect((int)x, (int)y, 32, 48);
		
	}

	
}
